CCS PCM C Compiler, Version 4.104, 5967               08-may.-19 11:05

               Filename: C:\Users\Wicho\Documents\ESCOM\Analogica\Proyecto\Prueba\LCDX3.lst

               ROM used: 1027 words (13%)
                         Largest free fragment is 2048
               RAM used: 18 (5%) at main() level
                         43 (12%) worst case
               Stack:    5 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2F3
0003:  NOP
.................... #include <16F887.h>            // Utilizamos el PIC 16F887 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device ADC=10                         // Usa resolución de 10 bits 
.................... #use delay(clock=4M)       // Cristal a utilizar 
*
0027:  MOVLW  3B
0028:  MOVWF  04
0029:  BCF    03.7
002A:  MOVF   00,W
002B:  BTFSC  03.2
002C:  GOTO   03B
002D:  MOVLW  01
002E:  MOVWF  78
002F:  CLRF   77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  DECFSZ 78,F
0033:  GOTO   02F
0034:  MOVLW  4A
0035:  MOVWF  77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  GOTO   039
0039:  DECFSZ 00,F
003A:  GOTO   02D
003B:  RETURN
.................... //#include <LCDX3.h> 
.................... #FUSES NOWDT, INTRC_IO, nomclr 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  08,W
0052:  IORLW  F0
0053:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0054:  BCF    03.5
0055:  BSF    08.2
....................    delay_cycles(1); 
0056:  NOP
....................    lcd_output_enable(1); 
0057:  BSF    08.0
....................    delay_cycles(1); 
0058:  NOP
....................    high = lcd_read_nibble(); 
0059:  CALL   048
005A:  MOVF   78,W
005B:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
005C:  BCF    08.0
....................    delay_cycles(1); 
005D:  NOP
....................    lcd_output_enable(1); 
005E:  BSF    08.0
....................    delay_us(1); 
005F:  NOP
....................    low = lcd_read_nibble(); 
0060:  CALL   048
0061:  MOVF   78,W
0062:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
0063:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0064:  MOVLW  0F
0065:  BSF    03.5
0066:  ANDWF  08,W
0067:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0068:  BCF    03.5
0069:  SWAPF  42,W
006A:  MOVWF  77
006B:  MOVLW  F0
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  41,W
006F:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0048:  MOVF   08,W
0049:  MOVWF  77
004A:  SWAPF  08,W
004B:  ANDLW  0F
004C:  MOVWF  78
....................   #endif 
.................... } 
004D:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003C:  SWAPF  42,W
003D:  ANDLW  F0
003E:  MOVWF  77
003F:  MOVLW  0F
0040:  ANDWF  08,W
0041:  IORWF  77,W
0042:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0043:  NOP
....................    lcd_output_enable(1); 
0044:  BSF    08.0
....................    delay_us(2); 
0045:  GOTO   046
....................    lcd_output_enable(0); 
0046:  BCF    08.0
.................... } 
0047:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
004E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0070:  MOVF   78,W
0071:  MOVWF  41
0072:  BTFSC  41.7
0073:  GOTO   04F
....................    lcd_output_rs(address); 
0074:  BTFSS  3F.0
0075:  BCF    08.1
0076:  BTFSC  3F.0
0077:  BSF    08.1
....................    delay_cycles(1); 
0078:  NOP
....................    lcd_output_rw(0); 
0079:  BCF    08.2
....................    delay_cycles(1); 
007A:  NOP
....................    lcd_output_enable(0); 
007B:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
007C:  SWAPF  40,W
007D:  MOVWF  41
007E:  MOVLW  0F
007F:  ANDWF  41,F
0080:  MOVF   41,W
0081:  MOVWF  42
0082:  CALL   03C
....................    lcd_send_nibble(n & 0xf); 
0083:  MOVF   40,W
0084:  ANDLW  0F
0085:  MOVWF  41
0086:  MOVWF  42
0087:  CALL   03C
.................... } 
0088:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0089:  MOVLW  0F
008A:  BSF    03.5
008B:  ANDWF  08,W
008C:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
008D:  BCF    08.0
....................    lcd_rs_tris(); 
008E:  BCF    08.1
....................    lcd_rw_tris(); 
008F:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0090:  BCF    03.5
0091:  BCF    08.1
....................    lcd_output_rw(0); 
0092:  BCF    08.2
....................    lcd_output_enable(0); 
0093:  BCF    08.0
....................      
....................    delay_ms(15); 
0094:  MOVLW  0F
0095:  MOVWF  3B
0096:  CALL   027
....................    for(i=1;i<=3;++i) 
0097:  MOVLW  01
0098:  MOVWF  2D
0099:  MOVF   2D,W
009A:  SUBLW  03
009B:  BTFSS  03.0
009C:  GOTO   0A5
....................    { 
....................        lcd_send_nibble(3); 
009D:  MOVLW  03
009E:  MOVWF  42
009F:  CALL   03C
....................        delay_ms(5); 
00A0:  MOVLW  05
00A1:  MOVWF  3B
00A2:  CALL   027
....................    } 
00A3:  INCF   2D,F
00A4:  GOTO   099
....................      
....................    lcd_send_nibble(2); 
00A5:  MOVLW  02
00A6:  MOVWF  42
00A7:  CALL   03C
....................    for(i=0;i<=3;++i) 
00A8:  CLRF   2D
00A9:  MOVF   2D,W
00AA:  SUBLW  03
00AB:  BTFSS  03.0
00AC:  GOTO   0B6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AD:  MOVF   2D,W
00AE:  CALL   004
00AF:  MOVWF  2E
00B0:  CLRF   3F
00B1:  MOVF   2E,W
00B2:  MOVWF  40
00B3:  CALL   04E
00B4:  INCF   2D,F
00B5:  GOTO   0A9
.................... } 
00B6:  BCF    0A.3
00B7:  BCF    0A.4
00B8:  GOTO   308 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
00B9:  DECFSZ 3C,W
00BA:  GOTO   0BC
00BB:  GOTO   0BF
....................       address=LCD_LINE_TWO; 
00BC:  MOVLW  40
00BD:  MOVWF  3D
....................    else 
00BE:  GOTO   0C0
....................       address=0; 
00BF:  CLRF   3D
....................       
....................    address+=x-1; 
00C0:  MOVLW  01
00C1:  SUBWF  3B,W
00C2:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address); 
00C3:  MOVF   3D,W
00C4:  IORLW  80
00C5:  MOVWF  3E
00C6:  CLRF   3F
00C7:  MOVF   3E,W
00C8:  MOVWF  40
00C9:  CALL   04E
.................... } 
00CA:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00CB:  MOVF   3A,W
00CC:  XORLW  0C
00CD:  BTFSC  03.2
00CE:  GOTO   0D6
00CF:  XORLW  06
00D0:  BTFSC  03.2
00D1:  GOTO   0DE
00D2:  XORLW  02
00D3:  BTFSC  03.2
00D4:  GOTO   0E4
00D5:  GOTO   0E9
....................       case '\f'   :  lcd_send_byte(0,1); 
00D6:  CLRF   3F
00D7:  MOVLW  01
00D8:  MOVWF  40
00D9:  CALL   04E
....................                      delay_ms(2); 
00DA:  MOVLW  02
00DB:  MOVWF  3B
00DC:  CALL   027
....................                      break; 
00DD:  GOTO   0EF
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DE:  MOVLW  01
00DF:  MOVWF  3B
00E0:  MOVLW  02
00E1:  MOVWF  3C
00E2:  CALL   0B9
00E3:  GOTO   0EF
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E4:  CLRF   3F
00E5:  MOVLW  10
00E6:  MOVWF  40
00E7:  CALL   04E
00E8:  GOTO   0EF
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00E9:  MOVLW  01
00EA:  MOVWF  3F
00EB:  MOVF   3A,W
00EC:  MOVWF  40
00ED:  CALL   04E
00EE:  GOTO   0EF
....................    } 
.................... } 
00EF:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... //#use standard_io (B) 
....................  
.................... void main () 
.................... { 
*
02F3:  CLRF   04
02F4:  BCF    03.7
02F5:  MOVLW  1F
02F6:  ANDWF  03,F
02F7:  BSF    03.5
02F8:  BSF    03.6
02F9:  MOVF   09,W
02FA:  ANDLW  C0
02FB:  MOVWF  09
02FC:  BCF    03.6
02FD:  BCF    1F.4
02FE:  BCF    1F.5
02FF:  MOVLW  00
0300:  BSF    03.6
0301:  MOVWF  08
0302:  BCF    03.5
0303:  CLRF   07
0304:  CLRF   08
0305:  CLRF   09
....................    float temper,medicion,voltaje; 
....................     
....................    lcd_init();                      // Inicia LCD 
0306:  BCF    03.6
0307:  GOTO   089
....................     
....................    lcd_putc ("\f");    
0308:  MOVLW  0C
0309:  BSF    03.6
030A:  MOVWF  0D
030B:  MOVLW  00
030C:  MOVWF  0F
030D:  BCF    03.6
030E:  CALL   0F0
....................    lcd_putc(" Termometro\n");       // Saca texto 
030F:  MOVLW  0D
0310:  BSF    03.6
0311:  MOVWF  0D
0312:  MOVLW  00
0313:  MOVWF  0F
0314:  BCF    03.6
0315:  CALL   0F0
....................    lcd_putc(" con LM35");           // Saca texto 
0316:  MOVLW  14
0317:  BSF    03.6
0318:  MOVWF  0D
0319:  MOVLW  00
031A:  MOVWF  0F
031B:  BCF    03.6
031C:  CALL   0F0
....................    delay_ms(2000); 
031D:  MOVLW  08
031E:  MOVWF  2D
031F:  MOVLW  FA
0320:  MOVWF  3B
0321:  CALL   027
0322:  DECFSZ 2D,F
0323:  GOTO   31F
....................    lcd_putc ("\f");    
0324:  MOVLW  19
0325:  BSF    03.6
0326:  MOVWF  0D
0327:  MOVLW  00
0328:  MOVWF  0F
0329:  BCF    03.6
032A:  CALL   0F0
....................    lcd_putc("Temp  ");              // Saca texto 
032B:  MOVLW  1A
032C:  BSF    03.6
032D:  MOVWF  0D
032E:  MOVLW  00
032F:  MOVWF  0F
0330:  BCF    03.6
0331:  CALL   0F0
....................    delay_ms(1000);  
0332:  MOVLW  04
0333:  MOVWF  2D
0334:  MOVLW  FA
0335:  MOVWF  3B
0336:  CALL   027
0337:  DECFSZ 2D,F
0338:  GOTO   334
....................    lcd_gotoxy(12,1);                // Acomoda cursor LCD 
0339:  MOVLW  0C
033A:  MOVWF  3B
033B:  MOVLW  01
033C:  MOVWF  3C
033D:  CALL   0B9
....................    lcd_putc("oC\n");//  
033E:  MOVLW  1E
033F:  BSF    03.6
0340:  MOVWF  0D
0341:  MOVLW  00
0342:  MOVWF  0F
0343:  BCF    03.6
0344:  CALL   0F0
....................    lcd_putc("volt cas "); 
0345:  MOVLW  20
0346:  BSF    03.6
0347:  MOVWF  0D
0348:  MOVLW  00
0349:  MOVWF  0F
034A:  BCF    03.6
034B:  CALL   0F0
....................     
....................    set_tris_a(0b00000001);          //Pongo el RA0 como entrada 
034C:  MOVLW  01
034D:  BSF    03.5
034E:  MOVWF  05
....................    set_tris_d(0);                   //Pongo el Puerto D como Salida 
034F:  MOVLW  00
0350:  MOVWF  08
....................    setup_adc_ports(all_analog);     //Pongo todo el puerto a analogo 
0351:  BSF    03.6
0352:  MOVF   09,W
0353:  ANDLW  C0
0354:  IORLW  1F
0355:  MOVWF  09
0356:  BCF    03.6
0357:  BCF    1F.4
0358:  BCF    1F.5
0359:  MOVLW  FF
035A:  BSF    03.6
035B:  MOVWF  08
....................    setup_adc(adc_clock_internal);   //Selecciono reloj interno para conversion 
035C:  BCF    03.5
035D:  BCF    03.6
035E:  BSF    1F.6
035F:  BSF    1F.7
0360:  BSF    03.5
0361:  BSF    1F.7
0362:  BCF    03.5
0363:  BSF    1F.0
....................     
....................    while (1) 
....................     {   
....................     lcd_gotoxy(6,1);                // Acomoda cursor LCD 
0364:  MOVLW  06
0365:  MOVWF  3B
0366:  MOVLW  01
0367:  MOVWF  3C
0368:  CALL   0B9
....................     lcd_putc(" ");                  // Limpia ese sector de pantalla 
0369:  MOVLW  25
036A:  BSF    03.6
036B:  MOVWF  0D
036C:  MOVLW  00
036D:  MOVWF  0F
036E:  BCF    03.6
036F:  CALL   0F0
....................     lcd_gotoxy(6,1);                // Acomoda cursor LCD 
0370:  MOVLW  06
0371:  MOVWF  3B
0372:  MOVLW  01
0373:  MOVWF  3C
0374:  CALL   0B9
....................      
....................     set_adc_channel(0);            // Elige canal a medir RA0 
0375:  MOVLW  00
0376:  MOVWF  78
0377:  MOVF   1F,W
0378:  ANDLW  C3
0379:  IORWF  78,W
037A:  MOVWF  1F
....................     delay_us(20); 
037B:  MOVLW  06
037C:  MOVWF  77
037D:  DECFSZ 77,F
037E:  GOTO   37D
037F:  NOP
....................     medicion=read_adc();           // Hace conversión AD  
0380:  BSF    1F.1
0381:  BTFSC  1F.1
0382:  GOTO   381
0383:  MOVF   1E,W
0384:  MOVWF  7A
0385:  BSF    03.5
0386:  MOVF   1E,W
0387:  BCF    03.5
0388:  MOVWF  2D
0389:  MOVF   1E,W
038A:  MOVWF  2E
038B:  GOTO   136
038C:  MOVF   7A,W
038D:  MOVWF  28
038E:  MOVF   79,W
038F:  MOVWF  27
0390:  MOVF   78,W
0391:  MOVWF  26
0392:  MOVF   77,W
0393:  MOVWF  25
....................     temper=medicion*(0.048875);       // Pasa binario a °C 
0394:  MOVF   28,W
0395:  MOVWF  3D
0396:  MOVF   27,W
0397:  MOVWF  3C
0398:  MOVF   26,W
0399:  MOVWF  3B
039A:  MOVF   25,W
039B:  MOVWF  3A
039C:  MOVLW  27
039D:  MOVWF  41
039E:  MOVLW  31
039F:  MOVWF  40
03A0:  MOVLW  48
03A1:  MOVWF  3F
03A2:  MOVLW  7A
03A3:  MOVWF  3E
03A4:  CALL   155
03A5:  MOVF   7A,W
03A6:  MOVWF  24
03A7:  MOVF   79,W
03A8:  MOVWF  23
03A9:  MOVF   78,W
03AA:  MOVWF  22
03AB:  MOVF   77,W
03AC:  MOVWF  21
....................     voltaje=medicion*(0.004888); 
03AD:  MOVF   28,W
03AE:  MOVWF  3D
03AF:  MOVF   27,W
03B0:  MOVWF  3C
03B1:  MOVF   26,W
03B2:  MOVWF  3B
03B3:  MOVF   25,W
03B4:  MOVWF  3A
03B5:  MOVLW  84
03B6:  MOVWF  41
03B7:  MOVLW  2B
03B8:  MOVWF  40
03B9:  MOVLW  20
03BA:  MOVWF  3F
03BB:  MOVLW  77
03BC:  MOVWF  3E
03BD:  CALL   155
03BE:  MOVF   7A,W
03BF:  MOVWF  2C
03C0:  MOVF   79,W
03C1:  MOVWF  2B
03C2:  MOVF   78,W
03C3:  MOVWF  2A
03C4:  MOVF   77,W
03C5:  MOVWF  29
....................     //**********************************************************// 
....................     printf(lcd_putc," %02.3f",temper);   // xxx.x °C 
03C6:  MOVLW  20
03C7:  MOVWF  3A
03C8:  CALL   0CB
03C9:  MOVLW  C9
03CA:  MOVWF  04
03CB:  MOVF   24,W
03CC:  MOVWF  30
03CD:  MOVF   23,W
03CE:  MOVWF  2F
03CF:  MOVF   22,W
03D0:  MOVWF  2E
03D1:  MOVF   21,W
03D2:  MOVWF  2D
03D3:  MOVLW  03
03D4:  MOVWF  31
03D5:  CALL   20C
....................     delay_ms (1000); 
03D6:  MOVLW  04
03D7:  MOVWF  2D
03D8:  MOVLW  FA
03D9:  MOVWF  3B
03DA:  CALL   027
03DB:  DECFSZ 2D,F
03DC:  GOTO   3D8
....................     lcd_gotoxy(10,2);               // Acomoda cursor LCD 
03DD:  MOVLW  0A
03DE:  MOVWF  3B
03DF:  MOVLW  02
03E0:  MOVWF  3C
03E1:  CALL   0B9
....................     lcd_putc(" ");                  // Limpia ese sector de pantalla 
03E2:  MOVLW  26
03E3:  BSF    03.6
03E4:  MOVWF  0D
03E5:  MOVLW  00
03E6:  MOVWF  0F
03E7:  BCF    03.6
03E8:  CALL   0F0
....................     lcd_gotoxy(10,2);               // Acomoda cursor LCD 
03E9:  MOVLW  0A
03EA:  MOVWF  3B
03EB:  MOVLW  02
03EC:  MOVWF  3C
03ED:  CALL   0B9
....................     printf(lcd_putc,"%02.2f v",voltaje); 
03EE:  MOVLW  C9
03EF:  MOVWF  04
03F0:  MOVF   2C,W
03F1:  MOVWF  30
03F2:  MOVF   2B,W
03F3:  MOVWF  2F
03F4:  MOVF   2A,W
03F5:  MOVWF  2E
03F6:  MOVF   29,W
03F7:  MOVWF  2D
03F8:  MOVLW  02
03F9:  MOVWF  31
03FA:  CALL   20C
03FB:  MOVLW  20
03FC:  MOVWF  3A
03FD:  CALL   0CB
03FE:  MOVLW  76
03FF:  MOVWF  3A
0400:  CALL   0CB
....................     } 
0401:  GOTO   364
.................... } 
....................  
0402:  SLEEP

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
